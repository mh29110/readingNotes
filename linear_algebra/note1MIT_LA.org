#+BLOG: phantomjia
#+POSTID: 234
#+DATE: [2014-08-16 Sat 20:22]
#+OPTIONS: toc:nil num:t todo:nil pri:nil tags:nil ^:t TeX:nil
#+CATEGORY: notes
#+TAGS:linearAlgebra
#+DESCRIPTION:
#+TITLE: MIT Linear Algebra Notes<1>

我的MIT的线性代数的几何表示课堂笔记. 
实际应用学习中越来越多的涉及到了线性代数和解析几何,也让我有机会重新认识和领略数学之美. 涉及到OpenGl和游戏3D引擎编写也需要这些知识.

印象笔记不支持数学公式,这让我复习笔记的时候觉得非常的不爽.所以我决定用emacs重写一遍.

* Lecture one  
 线性代数的核心概念...怎么用行和列进行矩阵操作.以向量的思维操作.
** Matrix and Vector
	* 矩阵M乘以向量x , 是矩阵的列向量的线性组合.
      Mx = b  .     columns vectors ->     b = columns of M * x.
	* 向量乘以矩阵,  是矩阵的行向量的线性组合.
*** 个人理解:
- 矩阵乘以向量 
- 向量乘以矩阵
*** 线性无关性
 非奇异矩阵  因为Mx = b ,如果M是奇异矩阵,则x不一定有解.例如三维时,三个列向量在一个平面上,b就不能覆盖整个三维空间. 
fixed function pipeline 固定功能管道
*** 列变换时矩阵右承,而行变换则是左承.
	* 对于矩阵M ,如果是M*A ,则是用A对M进行列向量分析.  如果是A*M ,则是A对M进行行向量分析.

	* 置换矩阵Permutation  :  放在不同侧,效果不同.

* Lecture two ->four   Elimination 
** 矩阵消元法   (No row exchange) 
from   A =b  to Ux=c     | U ..upper  triangular matrix  .上三角矩阵    
- 通过矩阵消元法解方程组,从矩阵A得到矩阵U的这个消元过程就是解方程组的过程.是数学界最常见的运算之一.
  方程组右边的值可以带入左边的矩阵,扩展为|增广矩阵|.
- EA = U .  E就是矩阵消元过程中累积的矩阵变换.  (此处结合高斯-若尔当消元来理解)
** Inverse Matrix
*** definition
 逆矩阵（英语：inverse matrix）：在线性代数中，给定一个 n 阶方阵A，若存在一 n 阶方阵B，使得AB = BA = I_n ，其中I_n 为n 阶单位矩阵，则称A是可逆的，且B是A的逆矩阵，记作A^-1 。

只有正方形（n×n）的矩阵，亦即方阵，才可能、但非必然有逆矩阵。若方阵A的逆矩阵存在，则称A为非奇异方阵或可逆方阵。
与行列式类似，逆矩阵一般常用于求解包含数个变量的数学方程式。

与行列式类似，逆矩阵一般常用于求解包含数个变量的数学方程式。
	*   若方矩阵没有逆  =>    矩阵中所有列向量的线性组合都是平行的. 无法构成一个单位矩阵I . 
	*   行列式为零没有逆矩阵.

	* If you can find a non-zero Vector x  with Ax = 0.  then  A isn't invertible.
    Ax = 0  ->    A*A^-1 * x = 0*A^-1   ->  x = 0*A^-1   ->   x = 0.  | but A!=0.  

	*  A*B  的逆矩阵等于( B^-1 * A^-1 )    |  AB相乘后的矩阵的逆矩阵 等于 B的逆矩阵乘以A的逆矩阵 . 注意是逆序.  (lecture4中用到)
	* A * (column j of A^-1)   =  column j of I .    利用矩阵乘法的列向量分析法.
*** 初等变换
  如果矩阵A和B互逆，则AB=BA=I.由条件AB=BA以及矩阵乘法的定义可知，矩阵A和B都是方阵。再由条件AB=I以及定理“两个矩阵的乘积的行列式等于这两个矩阵的行列式的乘积”可知，这两个矩阵的行列式都不为0。也就是说，这两个矩阵的秩等于它们的级数（或称为阶，也就是说，A与B都是方阵，且rank(A) = rank(B) = n）。换句话说，这两个矩阵可以只经由初等行变换，或者只经由初等列变换，变为单位矩阵。

  因为对矩阵A施以初等行变换（初等列变换）就相当于在A的左边（右边）乘以相应的初等矩阵，所以我们可以同时对A和I施以相同的初等行变换（初等列变换）。这样，当矩阵A被变为I时，I就被变为A的逆阵B。
**** 课程中例子如下图
[[file:imgs/inverse1.png]]
[[file:imgs/inverse2.png]]
** Matrix Multiply
                   A*B=  C
	1. ** 点分析法         Cij = Ai1*B1j  +  Ai2*B2J  + ... +  Ain*Bnj.
	2. ** 列向量分析:　  Ｃ中的每一列都是由Ａ中的所有列向量的线性组合．具体组合关系由Ｂ中的列向量表示．
                   矩阵A乘以矩阵B ,可以看成A矩阵分别乘以B矩阵的每一个列向量. 也就是针对B矩阵的每个列向量进行A矩阵全部列向量的线性组合.

     3.**行向量分析:       C中的每一行都是B中所有行向量的线性组合.  C中的行向量对应A中的行向量.

     4.****   A的列向量* B的行向量.   形成一个矩阵. (倍数).
                    A*B 是A的列向量*B的行向量 的总和 .      |  AB= Sum[    (columns of A )* (cows of B)  ]. | 矩阵加法.

     5..*********分块乘法.
    
** Transpose Matrix             转置矩阵          
                         Transpose  =>   (A)^T_ij = Aji  
	* (A^T)^T = A                       转置是自身逆运算。
	* (A+B)^T = A^T + B^T .              转置是从m × n矩阵的向量空间到所有n × m矩阵的向量空间的线性映射。
	* (AB)^T = B^T A^T .                注意因子反转的次序。以此可推出方块矩阵A是可逆矩阵，当且仅当AT是可逆矩阵.在这种情况下有 (A−1)T = (AT)−1。 
      相对容易的把这个结果扩展到矩阵相乘的一般情况，可得出 (ABC...XYZ)T = ZTYTXT...CTBTAT。
      (A^T)^-1 = (A^-1)^T             A的 转置的逆矩阵   等于     A的逆矩阵的转置.  :important:
*** 对称矩阵  A^T = A .
*** R^T*R is always Symmetric . 矩阵的转置乘以矩阵总是得到一个对称性的矩阵.   
    because of B^T A^T = (AB)^T ,then R^t*R = R^T * (R^T)^T = (R^T*R)^T , so  got it.


* Lecture five  
** Permutations P  : execute row exchanges       置换矩阵
***  if no row exchanges ->   A = LU   |   L : lower triangular Matrix 下三角矩阵.   | U ..upper  triangular matrix  .上三角矩阵.
***  PA = LU .     置换矩阵是行重新排列了的单元矩阵.   n阶单元方阵P的排列组合数目 = n!  .即n*(n-1) ...2*1.
     性质如下: 
     - P^-1 = P^T        : P的逆矩阵等于P的转置矩阵.
     - P^T * P = I      :上式推广A^-1*A = I .
  
                                 **** _/Chapter three/_   :   Vector Space
** Vector Space
***  example  R^2
    R^2 = all 2 dimensional real vectors .   所有的二维实数向量.
*** R^n 是包含所有n维实数向量的向量空间.
    所有空间内向量符合八大运算规则,并且运算得出的结果向量仍然都在这个空间内.
*** 子空间 subSpace 
    a vector space inside R^n  , is a subspace of R^n.
    比如: 相对于R^2 ,它的子空间包括
      1. all of R^2.
      2. any line through the original point.  L
      3. zero vector only .   Z
** 使用矩阵来表示子空间
   example R^3 :  The columns in A , all their linear combinations form a subspace . called  _/the column space/_ .  C(A)
                 列向量空间 :  所有矩阵中的列向量的线性组合,构成了一个子空间.  本例中它组成了一个通过原点的平面. 
   + 所有的子空间都必须包含零向量.
   + 子空间是算法规则对列向量的封闭.
   + if have subspace S and T ,the intersection(空间交集) is a subspace .
** column space  
** Ax = b (方程组)
  方程组是否总有解?什么样的b能使得方程组有解?   
      A ->matrix who has n rows , so column space of A is a subspace of R^n.
  -  (linear algebra) the columns in A ,all their linear combinations form a subspace .called the column space .
  -  (equition set)   Does Ax = b always have a solution for every b?   | 方程组是否总有解?
  以上两条总结: 对于A矩阵的列向量来说,他们的线性组合能否填充整个n维空间?
*** 何时有解?
    I can solve Ax = b when b is a combination of the columns. (when b is in the column space of A).
    只有b是各列的线性组合时,Ax = b 才有解. | 只有当b在A的列向量空间中时,Ax = b 才有解.
*** 重点描述                                                                    :important:
    *因为根据定义,这个列空间包含了所有A中列向量的线性组合,那么A*x应该还在这个列空间内.即这个列空间包含所有的Ax .列空间包含所有A乘以任意x得到的向量.也就是包含了所有有解的b*
    *如果b是各列向量的线性组合,那么线性组合就可以求出x.*  *如果b不是各列的线性组合,那么就不存在对应的x*.
    这就是列向量列空间重要的原因,因为它能告诉我们何时方程组有解.
*** 线性无关性.
    其中某个列向量对线性组合没有贡献,可以由其他列向量组合而成.
*** notice
         behind our abstract definition , we have a purpose . 抽象的定义背后,有实际目的.
** Null space
   for Ax = b ,when b = 0 .  check that solutions to Ax = 0  always give us a subspace .  
   #+BEGIN_SRC 
     if Av = 0 and Aw = 0 , then A(v+w) = 0;  | 本身就符合分配率.
     if Av = 9 then A(12v) = 0  -> 12(Av) = 0 | 基本定律
   #+END_SRC
   子空间对加法,数乘封闭.
*** definition 
   在数学中，一个算子 A 的零空间是方程 Av = 0 的所有解 v 的集合。它也叫做 A 的核, 核空间。用集合建造符号表示为
   Null(A) = {v \in V : Av = 0}.
   尽管术语核更加常用，术语零空间有时用在避免混淆于积分变换的情境中。应当避免把零空间混淆于/*零向量空间*/,它是只有零向量的空间。

   如果算子是在向量空间上的线性算子，零空间就是线性子空间。因此零空间是向量空间。







*** interpret  subject
  behind our abstract definition , we have a purpose . 抽象的定义背后,有实际目的.
  x component  =>  x分量. 
   
 t_2 f=\sum_{i=1}^{100}n^2  |for test  
 v \in V   |  { \ in }
 \sum      |   {\ sum }




#+imgs/inverse1.png http://phantomjia.files.wordpress.com/2014/08/wpid-inverse1.png
#+imgs/inverse2.png http://phantomjia.files.wordpress.com/2014/08/wpid-inverse2.png